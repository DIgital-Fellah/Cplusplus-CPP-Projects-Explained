#include <iostream>
#include <stack>
#include <string>
#include <cctype>
#include <stdexcept>

// Function to check if a character is an operator
bool isOperator(char c) {
    return (c == '+' || c == '-' || c == '*' || c == '/');
}

// Function to get the precedence of an operator
int getPrecedence(char op) {
    if (op == '+' || op == '-')
        return 1;
    if (op == '*' || op == '/')
        return 2;
    return 0;
}

// Function to perform arithmetic operation
double performOperation(double a, double b, char op) {
    switch (op) {
        case '+': return a + b;
        case '-': return a - b;
        case '*': return a * b;
        case '/':
            if (b == 0) throw std::runtime_error("Division by zero");
            return a / b;
        default: throw std::runtime_error("Invalid operator");
    }
}

// Function to evaluate the expression
double evaluateExpression(const std::string& expression) {
    std::stack<double> values;     // Stack to store operands
    std::stack<char> operators;    // Stack to store operators

    for (size_t i = 0; i < expression.length(); i++) {
        // If current character is a whitespace, skip it
        if (std::isspace(expression[i])) continue;

        // If current character is a digit, parse the number
        if (std::isdigit(expression[i])) {
            double value = 0;
            while (i < expression.length() && (std::isdigit(expression[i]) || expression[i] == '.')) {
                value = value * 10 + (expression[i] - '0');
                i++;
            }
            i--; // Move back one position as the for loop will increment i
            values.push(value);
        }
        // If current character is an opening parenthesis, push it to operators stack
        else if (expression[i] == '(') {
            operators.push(expression[i]);
        }
        // If current character is a closing parenthesis, solve the inner expression
        else if (expression[i] == ')') {
            while (!operators.empty() && operators.top() != '(') {
                double b = values.top(); values.pop();
                double a = values.top(); values.pop();
                char op = operators.top(); operators.pop();
                values.push(performOperation(a, b, op));
            }
            if (!operators.empty()) operators.pop(); // Remove the opening parenthesis
        }
        // If current character is an operator
        else if (isOperator(expression[i])) {
            while (!operators.empty() && getPrecedence(operators.top()) >= getPrecedence(expression[i])) {
                double b = values.top(); values.pop();
                double a = values.top(); values.pop();
                char op = operators.top(); operators.pop();
                values.push(performOperation(a, b, op));
            }
            operators.push(expression[i]);
        }
    }

    // Process any remaining operators
    while (!operators.empty()) {
        double b = values.top(); values.pop();
        double a = values.top(); values.pop();
        char op = operators.top(); operators.pop();
        values.push(performOperation(a, b, op));
    }

    // The final result should be at the top of the values stack
    return values.top();
}

int main() {
    std::string expression;
    std::cout << "Enter a mathematical expression: ";
    std::getline(std::cin, expression);

    try {
        double result = evaluateExpression(expression);
        std::cout << "Result: " << result << std::endl;
    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << std::endl;
    }

    return 0;
}
