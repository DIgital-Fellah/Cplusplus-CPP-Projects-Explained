#include <iostream>
#include <fstream>
#include <string>
#include <ctime>
#include <iomanip>

// Enum to define different log levels
enum class LogLevel {
    DEBUG,
    INFO,
    WARNING,
    ERROR
};

// Template class for the logger
template <typename OutputPolicy>
class Logger {
private:
    OutputPolicy output;  // The output policy (where to write logs)
    LogLevel minLevel;    // Minimum log level to be recorded

    // Helper function to get the current timestamp
    std::string getCurrentTimestamp() {
        auto now = std::chrono::system_clock::now();
        auto time = std::chrono::system_clock::to_time_t(now);
        std::stringstream ss;
        ss << std::put_time(std::localtime(&time), "%Y-%m-%d %H:%M:%S");
        return ss.str();
    }

    // Helper function to convert LogLevel to string
    std::string logLevelToString(LogLevel level) {
        switch (level) {
            case LogLevel::DEBUG:   return "DEBUG";
            case LogLevel::INFO:    return "INFO";
            case LogLevel::WARNING: return "WARNING";
            case LogLevel::ERROR:   return "ERROR";
            default:                return "UNKNOWN";
        }
    }

public:
    // Constructor
    Logger(LogLevel minLevel = LogLevel::DEBUG) : minLevel(minLevel) {}

    // Template method to log messages
    template <typename T>
    void log(LogLevel level, const T& message) {
        // Only log if the message level is >= the minimum level
        if (level >= minLevel) {
            std::string logMessage = getCurrentTimestamp() + " [" + 
                                     logLevelToString(level) + "] " + 
                                     std::to_string(message);
            output.write(logMessage);  // Use the output policy to write the log
        }
    }
};

// Output policy for console logging
class ConsoleOutput {
public:
    void write(const std::string& message) {
        std::cout << message << std::endl;
    }
};

// Output policy for file logging
class FileOutput {
private:
    std::ofstream file;
public:
    FileOutput(const std::string& filename) : file(filename, std::ios::app) {}
    
    void write(const std::string& message) {
        if (file.is_open()) {
            file << message << std::endl;
        }
    }

    ~FileOutput() {
        if (file.is_open()) {
            file.close();
        }
    }
};

int main() {
    // Create a console logger
    Logger<ConsoleOutput> consoleLogger(LogLevel::INFO);
    
    // Create a file logger
    Logger<FileOutput> fileLogger(LogLevel::DEBUG);

    // Log some messages
    consoleLogger.log(LogLevel::DEBUG, "This debug message won't be displayed");
    consoleLogger.log(LogLevel::INFO, "Information: System started");
    consoleLogger.log(LogLevel::WARNING, "Warning: Low memory");
    consoleLogger.log(LogLevel::ERROR, "Error: File not found");

    fileLogger.log(LogLevel::DEBUG, "This debug message will be written to file");
    fileLogger.log(LogLevel::INFO, "Information: User logged in");
    fileLogger.log(LogLevel::WARNING, "Warning: High CPU usage");
    fileLogger.log(LogLevel::ERROR, "Error: Database connection failed");

    return 0;
}
